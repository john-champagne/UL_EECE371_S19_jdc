#include <avr/pgmspace.h>
typedef uint8_t byte;

float image[32][32] = {{0}};

const PROGMEM byte imageRaw[] = {211,114,57,197,22,31,185,74,108,58,102,128,79,198,176,195,60,197,144,112,154,95,234,240,235,231,39,91,28,77,130,186,200,204,47,118,60,219,227,62,109,20,121,156,123,248,129,132,123,155,247,184,34,5,71,26,93,149,6,224,200,13,208,117,181,225,61,231,96,156,219,219,251,145,239,197,222,130,109,24,32,92,116,180,117,255,229,38,140,9,204,28,197,36,1,45,245,9,62,248,56,216,15,149,12,171,28,128,11,66,120,202,157,202,132,0,234,53,107,124,181,102,33,252,131,26,245,43,30,17,234,194,215,7,101,78,35,95,90,202,56,159,228,184,58,211,9,1,192,77,214,8,58,80,23,131,52,141,86,150,130,134,197,75,34,27,53,10,48,6,179,214,225,42,49,228,58,206,55,161,94,230,40,29,253,230,226,148,1,78,25,45,196,118,74,78,131,21,25,24,254,173,224,206,128,90,239,229,88,248,253,108,191,34,217,51,232,169,54,215,203,210,89,175,203,186,100,65,235,48,27,154,185,145,242,87,192,36,99,252,72,217,137,84,65,222,53,53,244,159,84,243,36,27,3,171,232,191,82,157,149,40,219,162,16,102,234,66,115,128,32,216,183,52,15,92,169,0,76,213,88,87,177,70,25,151,86,37,179,211,52,179,15,143,57,107,165,36,51,185,86,138,126,247,22,111,97,58,204,25,136,56,60,241,155,101,120,92,190,3,251,250,158,194,200,124,196,117,249,238,148,33,48,168,72,89,206,206,2,60,55,188,248,79,234,24,230,54,81,169,41,196,199,37,55,134,15,21,138,177,26,2,116,242,185,236,134,231,140,5,156,27,23,53,242,255,207,58,71,128,198,219,89,249,86,186,75,199,146,54,218,84,153,58,121,123,214,254,22,75,168,189,0,20,160,77 ,245,139,9,140,195,64,168,107,235,81,239,33,194,233,213,136,122,210,255,203,160,237,37,225,156,96,36,34,240,211,219,151,205,55,234,245,42,84,156,82,76,125,100,89,105,29,199,169,76,209,118,138,182,248,171,139,241,230,57,146,11,224,245,193,231,9,8,119,19,159,87,93,20,79,95,5,125,38,254,143,40,248,67,163,99,169,131,33,155,41,96,114,108,2,112,11,152,40,30,24,215,156,230,55,203,103,253,99,76,82,125,110,154,35,173,11,31,98,128,2,219,20,217,167,123,29,42,248,34,122,60,69,89,189,75,249,245,80,26,158,112,153,252,191,178,30,87,168,237,91,108,183,236,131,163,137,158,124,60,5,173,110,175,6,5,148,79,144,180,177,193,168,133,41,17,211,18,155,72,192,39,15,199,1,41,213,203,221,40,49,219,196,191,73,70,186,168,9,254,168,81,118,50,96,66,74,121,121,7,130,186,173,175,233,118,72,134,101,198,207,34,84,234,147,123,75,99,18,214,35,75,186,151,30,84,170,199,156,137,139,129,233,126,43,186,210,143,31,118,93,245,34,50,243,49,117,41,89,144,43,151,89,6,56,38,59,184,5,151,215,100,96,170,26,55,202,231,136,128,85,94,160,63,68,218,125,73,66,232,99,233,175,201,156,230,40,144,143,50,217,199,34,21,200,118,249,100,253,35,170,199,18,61,166,198,184,103,164,99,6,77,193,34,185,226,156,209,165,178,13,155,241,93,216,57,7,50,99,166,230,241,134,236,86,112,177,225,174,130,34,87,101,238,58,211,74,105,90,74,61,65,135,249,179,108,194,217,251,16,142,227,191,44,117,32,67,9,53,210,255,48,104,61,206,194,217,58,56,214,131,194,218,114,70,236,18,112,136,42,19,248,175,242,163,52,6,128,19,15,224,231,13,16,208,151,85,58,46,148,4,39,206,32,135,229,142,145,76,137,64,158,9,109,129,3,196,114,42,55,125,47,174,56,150,85,173,155,31,60,225,95,126,9,189,212,0,208,233,178,175,69,71,203,88,68,63,14,199,132,68,207,92,157,175,115,72,81,181,239,70,243,215,208,136,19,157,188,217,36,223,255,97,133,30,35,194,49,255,206,49,221,136,182,138,105,69,174,14,28,126,118,53,160,103,179,31,76,53,213,107,198,12,206,124,217,179,73,193,110,190,241,149,141,36,146,145,55,112,193,229,241,234,130,196,177,29,145,77,33,78,171,69,159,75,10,207,179,114,181,235,185,134,142,128,58,153,254,108,140,202,137,7,80,162,104,13,226,170,231,203,86,24,81,122,198,252,114,136,206,161,70,173,120,108,83,242,43,222,40,63,28,94,35,248,117,145,45,20,178,99,78,219,146,27,134,93,167,136};

float conv_single(float data[3][3], float filter[3][3]){
    float sum = 0;
    for (int i = 0; i < 3; i++){
        for (int j = 0; j < 3; j++){
            for (int k = 0; k < 3; k++){
                sum += data[i][k] * filter[k][j];       
            }
        }
    }
    return sum;
}

// Performs convolution on a 32x32 image with a 3x3 filter.
// Returns a 30x30 image.
float** conv(float data[32][32], float filter[3][3]){
    // Allocate output array.
    float** output = (float**)malloc(sizeof(float*) * 30);
    for (int i = 0; i < 30; i++)
        output[i] = (float*)malloc(sizeof(float) * 30);
    
    for (int i = 1; i <= 30; i++) {
        for (int j = 1; j <= 30; j++) {
            float window[3][3];
            for (unsigned int k = -1; k <= 1; k = k + 1){
                for (unsigned int l = -1; l <= 1; l = l + 1)
                    window[k][l] = data[i + k][j + l];
            }
            output[i-1][j-1] = conv_single(window, filter);
        }
    }
    return output;
}

void setup() {
    float filter[3][3] = { { 0 } }; 
    unsigned long start = millis();

    for (int i = 0; i < 32; i++)
        for (int j = 0; j < 32; j++)
            image[i][j] = pgm_read_word_near(imageRaw+(i*32 + j));

    conv(image, filter);
    conv(image, filter);
    conv(image, filter);
    unsigned long time = millis() - start;
    Serial.begin(9600);
    Serial.print(time);
}


void loop(){}
